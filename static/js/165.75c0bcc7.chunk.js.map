{"version":3,"file":"static/js/165.75c0bcc7.chunk.js","mappings":"mPAeA,SAASA,EAAT,GAA8E,IAA/DC,EAA8D,EAA9DA,GAAIC,EAA0D,EAA1DA,GAAIC,EAAsD,EAAtDA,GAAIC,EAAkD,EAAlDA,OAAQC,EAA0C,EAA1CA,eAAgBC,EAA0B,EAA1BA,gBAAiBC,EAAS,EAATA,QAE5DC,GAAWC,EAAAA,EAAAA,UAAQ,WAEvB,IAAMC,EAAQ,IAAIC,EAAAA,QAAcV,EAAIC,EAAIC,GAClCS,EAAM,IAAID,EAAAA,QAAcV,EAAIC,EAAI,GAGtC,OAFiB,IAAIS,EAAAA,gBAAuBE,cAAc,CAACH,EAAOE,MAIjE,CAACR,IAEJ,OAEI,iBACAU,cAAeR,EACfS,aAAcV,EAEZW,SAAU,SAACC,GAAUA,EAAKC,wBAC1BV,SAAUA,EALZ,UASI,+BACEW,MAAM,QACNC,QAASb,EAAU,GAAM,EACzBc,aAAa,EACbC,UAAW,EACXC,MAAO,EACPC,SAAU,GACVC,QAAS,OAUrB,SAASC,EAAT,GAAmF,IAAlEzB,EAAiE,EAAjEA,GAAIC,EAA6D,EAA7DA,GAAIC,EAAyD,EAAzDA,GAAIwB,EAAqD,EAArDA,OAAQC,EAA6C,EAA7CA,QAASxB,EAAoC,EAApCA,OAAQyB,EAA4B,EAA5BA,EAAGC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,eAGhE,GAA4BC,EAAAA,EAAAA,WAAS,GAArC,eAAOzB,EAAP,KAAgB0B,EAAhB,KACA,GAA4BD,EAAAA,EAAAA,WAAS,kBCvDCE,EDuD6B,IAAKvB,EAAAA,mBCtDjEwB,EAAAA,EAAAA,IACLD,EACAE,OAAOC,OACL,CACEC,gBAAgB,gVAYlBC,IAjBC,IAAiCL,EAAcK,KDuD7CC,GAAP,eAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRC,SAASC,KAAKC,MAAMC,OAAStC,EAAU,UAAY,SAClD,CAACA,KAIF,iCACQ,SAACuC,EAAA,EAAD,CACAC,QAAQ,OACRC,SAAU,IACVC,SAAU,CAAChD,EAAIC,EAAIC,GACnBgB,MAAOQ,EACPuB,SAAUV,EAEVW,aAAc,EACdC,eAAgB,GAChBC,eAAgB,GAChBC,eAAgB,GAChBC,YAAa,GACbC,eAAgBjD,EAAS,GAAM,EAC/BkD,aAAc9B,EAGd+B,YAAc,WACZ3B,EAAeD,IAGjBhB,cAAe,SAAC6C,GAAD,OAAW1B,GAAS,IACnClB,aAAc,SAAC4C,GAAD,OAAW1B,GAAS,IArBlC,SAuBCL,KAEL,SAAC5B,EAAD,CAAMC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAsBC,OAAQA,EAIlDG,QAAWA,GAJjB,eAA2CsB,OAwDnD,MA7CA,YAAmD,IAAnCzB,EAAkC,EAAlCA,OAAQ2B,EAA0B,EAA1BA,eAAgB6B,EAAU,EAAVA,SAGhCC,GAAgBC,EAAAA,EAAAA,IAAcC,EAAM3D,GAGpC4D,EAAW,GA4Bf,OAzBEH,EAAcI,SAAQ,SAACC,EAAGrC,GAEtB,GAAGqC,EAAEC,KAAK,CACR,IAAIlE,IAAOmE,EAAAA,EAAAA,IAASF,EAAEC,MACtBjE,GAAKmE,EAAAA,EAAAA,IAAQH,EAAEI,KACfnE,GAAKoE,EAAAA,EAAAA,IAAML,EAAEM,KAAM,OAAQZ,GAC3BjC,EAAS8C,EAAAA,GAAWP,EAAEQ,OACtB9C,EAAUsC,EAAES,OAEhBX,EAASY,MACP,SAAClD,EAAD,CACEzB,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EACpBwB,OAAQA,EAAQC,QAASA,EAASxB,OAAQA,EAAQyB,EAAGA,EACrDC,QAASoC,EACTnC,eAAgBA,GAJlB,eACuCmC,EAAEW,WAe3C,8BAGGb","sources":["components/Texts.js","utils/createBillboardMaterial.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useContext, useRef, lazy, Suspense } from 'react';\n\nimport { Canvas, useFrame, extend, useThree } from '@react-three/fiber'\nimport { meshBounds, Text } from \"@react-three/drei\";\nimport * as THREE from 'three'\n\nimport { DetailContextProvider, useDetailContextState, useDetailContextUpdater } from '../utils/detailContext';\n\nimport { createBillboardMaterial } from '../utils/createBillboardMaterial'\nimport { normLat, normLong, normZ, groupColor } from \"../utils/helper\"\nimport { filterNewData, termlist } from '../utils/helper';\n\nimport data from \"../data/mydata.json\"\n\n\nfunction Line({pX, pY, pZ, filter, handlePointOut, handlePointOver, hovered}){\n\n  const geometry = useMemo(()=>{\n\n    const start = new THREE.Vector3(pX, pY, pZ )\n    const end = new THREE.Vector3(pX, pY, 0 )\n    const geometry = new THREE.BufferGeometry().setFromPoints([start, end])\n\n    return geometry\n\n  }, [filter])\n\n  return(\n  \n      <line \n      onPointerOver={handlePointOver}\n      onPointerOut={handlePointOut}\n\n        onUpdate={(line) =>{ line.computeLineDistances()}}\n        geometry={geometry}>\n\n                  \n     \n          <lineDashedMaterial \n            color=\"black\"\n            opacity={hovered ? 0.8 : 0}\n            transparent={true}\n            linewidth={1}\n            scale={2}\n            dashSize={0.5}\n            gapSize={0.5}\n          />\n      </line>\n\n  )\n\n}\n\n\n\nfunction MyText({pX, pY, pZ, pColor, content, filter, i, dataObj, setClickDetail}){\n\n\n  const [hovered, setHover] = useState(false)\n  const [billboardMaterial] = useState(() => createBillboardMaterial(new  THREE.MeshBasicMaterial()))\n  \n  useEffect(() => {\n    document.body.style.cursor = hovered ? 'pointer' : 'auto'\n  }, [hovered])\n\n  return(\n\n    <>\n            <Text \n            anchorX='left' \n            fontSize={1.2} \n            position={[pX, pY, pZ]} \n            color={pColor}\n            material={billboardMaterial} \n\n            outlineWidth={0}\n            outlineOffsetX={.1}\n            outlineOffsetY={.1}\n            outlineOffsetZ={.1}\n            outlineBlur={.5}\n            outlineOpacity={hovered? 0.4 : 0}\n            outlineColor={pColor}\n\n            //  event listners\n            onPointerUp= {()=>{\n              setClickDetail(dataObj)\n             \n            }}\n            onPointerOver={(event) => setHover(true)}\n            onPointerOut={(event) => setHover(false)}>\n\n            {content}\n        </Text>\n        <Line pX={pX} pY={pY} pZ={pZ} key={`line-${i}`} filter={filter}\n\n              // handlePointOver={(event) => setHover(true)}\n              // handlePointOut={(event) => setHover(false)}\n              hovered = {hovered}\n        />\n\n  </>\n  )\n}\n\nfunction Texts({filter, setClickDetail, timeline}){\n   \n    ///Processing Filtered Data\n    let data_filtered = filterNewData(data, filter)\n\n\n    let textlist = [];\n  \n      //Draw Text\n      data_filtered.forEach((d, i)=>{\n\n          if(d.long){\n            let pX = - normLong(d.long),\n            pY = normLat(d.lat),\n            pZ = normZ(d.year, \"text\", timeline),\n            pColor = groupColor[d.group],\n            content = d.coname\n\n        textlist.push(             \n          <MyText \n            pX={pX} pY={pY} pZ={pZ} key={`text-${d.id}`} \n            pColor={pColor} content={content} filter={filter} i={i} \n            dataObj={d}\n            setClickDetail={setClickDetail}\n\n          />\n          )\n          }\n  \n\n      })\n\n\n\n    return (\n        <>\n  \n          \n          {textlist}\n   \n         \n        </>\n      )\n    \n}\nexport default Texts;\n\n\n","//https://codesandbox.io/s/xl6mt?file=/package.json\n\nimport { createDerivedMaterial } from 'troika-three-utils'\n\nexport function createBillboardMaterial(baseMaterial, opts) {\n  return createDerivedMaterial(\n    baseMaterial,\n    Object.assign(\n      {\n        vertexMainOutro: `\nvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nvec3 scale = vec3(\n  length(modelViewMatrix[0].xyz),\n  length(modelViewMatrix[1].xyz),\n  length(modelViewMatrix[2].xyz)\n  );\n// size attenuation: scale *= -mvPosition.z * 0.2;\nmvPosition.xyz += position * scale;\ngl_Position = projectionMatrix * mvPosition;\n`\n      },\n      opts\n    )\n  )\n}"],"names":["Line","pX","pY","pZ","filter","handlePointOut","handlePointOver","hovered","geometry","useMemo","start","THREE","end","setFromPoints","onPointerOver","onPointerOut","onUpdate","line","computeLineDistances","color","opacity","transparent","linewidth","scale","dashSize","gapSize","MyText","pColor","content","i","dataObj","setClickDetail","useState","setHover","baseMaterial","createDerivedMaterial","Object","assign","vertexMainOutro","opts","billboardMaterial","useEffect","document","body","style","cursor","Text","anchorX","fontSize","position","material","outlineWidth","outlineOffsetX","outlineOffsetY","outlineOffsetZ","outlineBlur","outlineOpacity","outlineColor","onPointerUp","event","timeline","data_filtered","filterNewData","data","textlist","forEach","d","long","normLong","normLat","lat","normZ","year","groupColor","group","coname","push","id"],"sourceRoot":""}